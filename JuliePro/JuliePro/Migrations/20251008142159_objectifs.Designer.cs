// <auto-generated />
using System;
using JuliePro.Models.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JuliePro.Migrations
{
    [DbContext(typeof(JulieProDbContext))]
    [Migration("20251008142159_objectifs")]
    partial class objectifs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JuliePro.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("StartWeight")
                        .HasColumnType("float");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2003, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AdeptInformatique@gmail.com",
                            FirstName = "Alexandre",
                            LastName = "Vigneault",
                            StartWeight = 140.0,
                            TrainerId = 1
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(2004, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Umamusume@gamer.org",
                            FirstName = "Julien",
                            LastName = "Blitzer",
                            StartWeight = 290.0,
                            TrainerId = 1
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(2005, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bonhommebabs@gmail.com",
                            FirstName = "Ludovick",
                            LastName = "Nadeau",
                            StartWeight = 210.0,
                            TrainerId = 1
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(2005, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "spookyeye@gmail.com",
                            FirstName = "Hedi",
                            LastName = "Melo Cherni",
                            StartWeight = 195.0,
                            TrainerId = 2
                        });
                });

            modelBuilder.Entity("JuliePro.Models.Objective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AchievedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<double>("DistanceKm")
                        .HasColumnType("float");

                    b.Property<double>("LostWeightKg")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Objective");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            DistanceKm = 2.0,
                            LostWeightKg = 5.0,
                            Name = "Course"
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 1,
                            DistanceKm = 15.0,
                            LostWeightKg = 4.0,
                            Name = "Perte de poids"
                        },
                        new
                        {
                            Id = 3,
                            AchievedDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            DistanceKm = 20.0,
                            LostWeightKg = 10.0,
                            Name = "Perte de poids"
                        },
                        new
                        {
                            Id = 4,
                            AchievedDate = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            DistanceKm = 10.0,
                            LostWeightKg = 7.0,
                            Name = "Course"
                        },
                        new
                        {
                            Id = 5,
                            CustomerId = 2,
                            DistanceKm = 15.0,
                            LostWeightKg = 10.0,
                            Name = "Perte de poids"
                        },
                        new
                        {
                            Id = 6,
                            AchievedDate = new DateTime(2025, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 3,
                            DistanceKm = 1.0,
                            LostWeightKg = 1.0,
                            Name = "Perte de poids"
                        },
                        new
                        {
                            Id = 7,
                            AchievedDate = new DateTime(2024, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 3,
                            DistanceKm = 1.0,
                            LostWeightKg = 2.0,
                            Name = "Course"
                        },
                        new
                        {
                            Id = 8,
                            AchievedDate = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 3,
                            DistanceKm = 3.0,
                            LostWeightKg = 4.0,
                            Name = "Course"
                        },
                        new
                        {
                            Id = 9,
                            CustomerId = 4,
                            DistanceKm = 5.0,
                            LostWeightKg = 7.0,
                            Name = "Perte de poids"
                        },
                        new
                        {
                            Id = 10,
                            AchievedDate = new DateTime(2025, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 4,
                            DistanceKm = 2.0,
                            LostWeightKg = 5.0,
                            Name = "Course"
                        });
                });

            modelBuilder.Entity("JuliePro.Models.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Specialities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Perte de poids"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Course"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Halthérophilie"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Réhabilitation"
                        });
                });

            modelBuilder.Entity("JuliePro.Models.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Trainer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Chrystal.lapierre@juliepro.ca",
                            FirstName = "Chrystal",
                            LastName = "Lapierre",
                            Photo = "Chrystal.png",
                            SpecialityId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "Felix.trudeau@juliePro.ca",
                            FirstName = "Félix",
                            LastName = "Trudeau",
                            Photo = "Felix.png",
                            SpecialityId = 2
                        },
                        new
                        {
                            Id = 3,
                            Email = "Frank.StJohn@juliepro.ca",
                            FirstName = "François",
                            LastName = "Saint-John",
                            Photo = "Francois.png",
                            SpecialityId = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "JC.Bastien@juliepro.ca",
                            FirstName = "Jean-Claude",
                            LastName = "Bastien",
                            Photo = "JeanClaude.png",
                            SpecialityId = 4
                        },
                        new
                        {
                            Id = 5,
                            Email = "JinLee.godette@juliepro.ca",
                            FirstName = "Jin Lee",
                            LastName = "Godette",
                            Photo = "Jin Lee.png",
                            SpecialityId = 3
                        },
                        new
                        {
                            Id = 6,
                            Email = "Karine.Lachance@juliepro.ca",
                            FirstName = "Karine",
                            LastName = "Lachance",
                            Photo = "Karine.png",
                            SpecialityId = 2
                        },
                        new
                        {
                            Id = 7,
                            Email = "Ramone.Esteban@juliepro.ca",
                            FirstName = "Ramone",
                            LastName = "Esteban",
                            Photo = "Ramone.png",
                            SpecialityId = 3
                        });
                });

            modelBuilder.Entity("JuliePro.Models.Customer", b =>
                {
                    b.HasOne("JuliePro.Models.Trainer", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("JuliePro.Models.Objective", b =>
                {
                    b.HasOne("JuliePro.Models.Customer", "Customer")
                        .WithMany("Objectives")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("JuliePro.Models.Trainer", b =>
                {
                    b.HasOne("JuliePro.Models.Speciality", "Speciality")
                        .WithMany("Trainers")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("JuliePro.Models.Customer", b =>
                {
                    b.Navigation("Objectives");
                });

            modelBuilder.Entity("JuliePro.Models.Speciality", b =>
                {
                    b.Navigation("Trainers");
                });
#pragma warning restore 612, 618
        }
    }
}
